# -*- coding: utf-8 -*-
"""Untitled0.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1hcPiDATczMrU06fTQ4YdpK_Ms0m8gKsN

The program was build using Python in Google Colab Notebook
Process of joining the 2 csv files.
1.   Check if the files are found in the path provided
2.   Check if the files are in .csv format 
3.   Check if the column(header) name exist in both files
4.   Check if the join type provided is correct
5.   Transform the reference column from file based on the join type to a list
6.   Create new empty dataframe with header from both files
7.   If the ref was found in both files then add them to the dataframe created in previous step
6.   If the join type is left or right then add the outer left/right part to the  dataframe

How to execute the files:
`Task.py pathfile1 pathfile2 colname jointype`
"""

import csv
import pathlib
import pandas as pd


import sys
 [0] is the file name , [1] is the first file, [2] is the second files, [3] is the column name, [4] id the join type
print sys.argv[0] 
path_1= sys.argv[1] 
path_2= sys.argv[2]
col_name= sys.argv[3]
join_t= sys.argv[4]

'''
path_1=  '/content/sample_data/part1.csv'
path_2= '/content/sample_data/part2.csv'
col_name= 'ID'
join_t= 'left'
'''
class NotCSV(Exception):
    """Raised when type is not csv"""
    pass
class ColNotFound(Exception):
  """raised when col not found"""
  pass
class WrongJoinType(Exception):
  """raised when wrong join type entered"""
  pass

#method to check file path
def check_path( path_0):
  while True:
    try:
      check = open(path_0, 'r').readlines()
    except FileNotFoundError:
      print("File is not found")
      path_0 = input("\n Please input the correct path")
    else:
      try:
        type_f = pathlib.Path(path_0).suffix
        if type_f != ".csv":
          raise NotCSV
        break
      except NotCSV:
        print(" file is not CSV", type_f)
        path_0=input("\n Please input the correct path")
      else:
        break

#check the 2 files path
check_path(path_1)
check_path(path_2)

#method to check the column in both files
def check_column( path_x, path_y, cols_name):
  while True:
    data1=pd.read_csv(path_x)
    data2= pd.read_csv(path_y)
    try:
      bool1= cols_name  in data1.columns
      bool2= cols_name  in data1.columns
      if bool1 == False or bool2== False :
        raise ColNotFound        
      break
    except ColNotFound:
      print("Col ",cols_name, " not found in one or both of the files")
      cols_name=input("\n Please input another column name: ")
    else:
      break
  return data1, data2, cols_name

data1,data2, col_name = check_column(path_1, path_2,col_name)

#method to check the join type
def check_type (join_type):
  while True:
    list_join=('inner','right','left')
    try:
      bool1= join_type  in list_join
      if bool1 == False :
        raise WrongJoinType        
      break
    except WrongJoinType:
      print("Incorrect join type! Available join type: inner, left, right")
      join_type=input("\n Please input the correct join type (lowercase only): ")
    else:
      break

check_type (join_t)

#check with step 5 do left right need to be removed?
def set_ref( data1,data2, join_t, col_name):
  if join_t == 'inner':
    print(join_t)
    if data1.shape[0] <= data2.shape[0]:
      return data1[col_name]
    else:
      return data2[col_name]
  elif join_t == 'left':
    return data1[col_name]
  elif join_t =='right':
    return data2[col_name]

col_ref=set_ref( data1,data2, join_t, col_name)

#tranform to a lsit
the_list = col_ref.values.tolist()
print(the_list)

data1.shape[0]

#get the header from both files
col1=data1.columns.values.tolist()
col2=data2.columns.values.tolist()

#arrange the ID column as the first column
data2list=data2.columns.values.tolist()
data2list.remove(col_name)
data2 = pd.concat([data2[col_name], data2[data2list]], axis=1)
data2.head()

# create an empty dataframe and combine them into one new df
df = pd.DataFrame()
df = pd.concat([df,pd.DataFrame(columns=col1)])
df = pd.concat([df,pd.DataFrame(columns=col2)])
df.head()

#inner join 
for i in the_list:
  ind =  data1[data1[col_name] == i].index[0]
  ind2 = data2[data2[col_name] == i].index[0]
  part1=data1.iloc[[ind]].values.tolist() 
  part2=data2.iloc[[ind]].values.tolist()
  new= [*part1[0], *part2[0][1:]]
  df.loc[len(df)] = new
  .remove(col_name)    
df.shape

#creating DF of outer left/right that need to be added to the inner join later
list_data = pd.DataFrame()
if join_t == 'left':
  print("left")
  list_data=data1[~data1[col_name].isin(the_list)]
elif  join_t == 'right':
  print("right")
  list_data=data2[~data2[col_name].isin(the_list)]

#combine the inner and outer join result
df=pd.concat([df,list_data], ignore_index=True, axis=0)

df.shape

df.head(5)
